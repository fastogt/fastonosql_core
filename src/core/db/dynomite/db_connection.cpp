/*  Copyright (C) 2014-2018 FastoGT. All right reserved.

    This file is part of FastoNoSQL.

    FastoNoSQL is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FastoNoSQL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FastoNoSQL.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <fastonosql/core/db/dynomite/db_connection.h>

#include <hiredis/hiredis.h>

#include <fastonosql/core/constant_commands_array.h>
#include <fastonosql/core/db/dynomite/command_translator.h>
#include <fastonosql/core/db/dynomite/server_info.h>

#include "core/db/dynomite/internal/commands_api.h"

namespace fastonosql {
namespace core {
namespace dynomite {
namespace {
const ConstantCommandsArray kCommands = {
    CommandHolder(GEN_CMD_STRING(DB_HELP_COMMAND),
                  "[command]",
                  "Return how to use command",
                  UNDEFINED_SINCE,
                  DB_HELP_COMMAND " " DB_GET_KEY_COMMAND,
                  0,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Help),
    CommandHolder(GEN_CMD_STRING(DB_INFO_COMMAND),
                  "[section]",
                  "Get information and statistics about the server",
                  UNDEFINED_SINCE,
                  DB_INFO_COMMAND " STATS",
                  0,
                  2,
                  CommandInfo::Native,
                  &CommandsApi::Info),
    CommandHolder(GEN_CMD_STRING("APPEND"),
                  "<key> <value>",
                  "Append a value to a key",
                  UNDEFINED_SINCE,
                  "APPEND test word",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Append),
    /*CommandHolder(GEN_CMD_STRING("AUTH"),
                  "<password>",
                  "Authenticate to the server",
                  UNDEFINED_SINCE,
                  "AUTH test",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Auth),*/
    CommandHolder(GEN_CMD_STRING("BGREWRITEAOF"),
                  "-",
                  "Asynchronously rewrite the append-only file",
                  UNDEFINED_SINCE,
                  "BGREWRITEAOF",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::BgRewriteAof),
    CommandHolder(GEN_CMD_STRING("BGSAVE"),
                  "-",
                  "Asynchronously save the dataset to disk",
                  UNDEFINED_SINCE,
                  "BGSAVE",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::BgSave),
    CommandHolder(GEN_CMD_STRING("BITCOUNT"),
                  "<key> [start] [end]",
                  "Count set bits in a string",
                  UNDEFINED_SINCE,
                  "BITCOUNT test",
                  1,
                  2,
                  CommandInfo::Native,
                  &CommandsApi::BitCount),
    CommandHolder(GEN_CMD_STRING("BITOP"),
                  "<operation> <destkey> <key> [key ...]",
                  "Perform bitwise operations between strings",
                  UNDEFINED_SINCE,
                  "BITOP AND dest key1 key2",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::BitOp),
    CommandHolder(GEN_CMD_STRING("BLPOP"),
                  "<key> [key ...] timeout",
                  "Remove and get the first element in a list, or block until one is available",
                  UNDEFINED_SINCE,
                  "BLPOP list1 list2 0",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::BlPop),
    CommandHolder(GEN_CMD_STRING("BRPOP"),
                  "<key> [key ...] timeout",
                  "Remove and get the last element in a list, or block until one is available",
                  UNDEFINED_SINCE,
                  "BRPOP list1 list2 0",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::BrPop),
    CommandHolder(GEN_CMD_STRING("BRPOPLPUSH"),
                  "<source> <destination> <timeout>",
                  "Pop a value from a list, push it to another list and return it; or block until one is available",
                  UNDEFINED_SINCE,
                  "BRPOPLPUSH list otherlist 10",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::BrPopLpush),

    CommandHolder(GEN_CMD_STRING("CLIENT KILL"),
                  "[ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]",
                  "Kill the connection of a client",
                  UNDEFINED_SINCE,
                  "CLIENT KILL 127.0.0.1:4444",
                  1,
                  9,
                  CommandInfo::Native,
                  &CommandsApi::ClientKill),
    CommandHolder(GEN_CMD_STRING("CLIENT LIST"),
                  "-",
                  "Get the list of client connections",
                  UNDEFINED_SINCE,
                  "CLIENT LIST",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ClientList),

    CommandHolder(GEN_CMD_STRING(DB_GET_CONFIG_COMMAND),
                  "<parameter>",
                  "Get the value of a configuration parameter",
                  UNDEFINED_SINCE,
                  DB_GET_CONFIG_COMMAND " databases",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ConfigGet),
    CommandHolder(GEN_CMD_STRING("CONFIG RESETSTAT"),
                  "-",
                  "Reset the stats returned by INFO",
                  UNDEFINED_SINCE,
                  "CONFIG RESETSTAT",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ConfigResetStat),
    CommandHolder(GEN_CMD_STRING("CONFIG REWRITE"),
                  "-",
                  "Rewrite the configuration file with the in memory configuration",
                  UNDEFINED_SINCE,
                  "CONFIG REWRITE",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ConfigRewrite),
    CommandHolder(GEN_CMD_STRING("CONFIG SET"),
                  "<parameter> <value>",
                  "Set a configuration parameter to the given value",
                  UNDEFINED_SINCE,
                  "CONFIG SET par val",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ConfigSet),

    CommandHolder(GEN_CMD_STRING(DB_DBKCOUNT_COMMAND),
                  "-",
                  "Return the number of keys in the selected database",
                  UNDEFINED_SINCE,
                  DB_DBKCOUNT_COMMAND,
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::DBKeysCount),
    CommandHolder(GEN_CMD_STRING("DBSIZE"),
                  "-",
                  "Return the number of keys in the selected database",
                  UNDEFINED_SINCE,
                  "DBSIZE",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::DBSize),

    CommandHolder(GEN_CMD_STRING("DEBUG OBJECT"),
                  "<key>",
                  "Get debugging information about a key",
                  UNDEFINED_SINCE,
                  "DEBUG OBJECT test",
                  1,
                  0,
                  CommandInfo::Internal,
                  &CommandsApi::DebugObject),
    CommandHolder(GEN_CMD_STRING("DEBUG SEGFAULT"),
                  "-",
                  "Make the server crash",
                  UNDEFINED_SINCE,
                  "DEBUG SEGFAULT",
                  0,
                  0,
                  CommandInfo::Internal,
                  &CommandsApi::DebugSegFault),

    CommandHolder(GEN_CMD_STRING("DECR"),
                  "<key>",
                  "Decrement the integer value of a key by one",
                  UNDEFINED_SINCE,
                  "DECR test",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Decr),
    CommandHolder(GEN_CMD_STRING("DECRBY"),
                  "<key> <decrement>",
                  "Decrement the integer value of a key by "
                  "the given number",
                  UNDEFINED_SINCE,
                  "DECRBY test 11",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::DecrBy),
    CommandHolder(GEN_CMD_STRING(DB_DELETE_KEY_COMMAND),
                  "<key> [key ...]",
                  "Delete a key",
                  UNDEFINED_SINCE,
                  DB_DELETE_KEY_COMMAND " key",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Delete),
    CommandHolder(GEN_CMD_STRING("DISCARD"),
                  "-",
                  "Discard all commands issued after MULTI",
                  UNDEFINED_SINCE,
                  "DISCARD",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Discard),
    CommandHolder(GEN_CMD_STRING("DUMP"),
                  "<key>",
                  "Return a serialized version of the value stored at the specified key.",
                  UNDEFINED_SINCE,
                  "DUMP test",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Dump),
    CommandHolder(GEN_CMD_STRING("ECHO"),
                  "<message>",
                  "Echo the given string",
                  UNDEFINED_SINCE,
                  "ECHO msg",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Echo),
    CommandHolder(GEN_CMD_STRING("EVAL"),
                  "<script> <numkeys> <key> [key ...] <arg> [arg ...]",
                  "Execute a Lua script server side",
                  UNDEFINED_SINCE,
                  "eval \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" 2 key1 key2 first second",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Eval),
    CommandHolder(GEN_CMD_STRING("EVALSHA"),
                  "<sha1> <numkeys> <key> [key ...] <arg> [arg ...]",
                  "Execute a Lua script server side",
                  UNDEFINED_SINCE,
                  "EVALSHA 6b1bf486c81ceb7edf3c093f4c48582e38c0e791 0",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::EvalSha),
    CommandHolder(GEN_CMD_STRING("EXEC"),
                  "-",
                  "Execute all commands issued after MULTI",
                  UNDEFINED_SINCE,
                  "EXEC",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Exec),
    CommandHolder(GEN_CMD_STRING("EXISTS"),
                  "key [key ...]",
                  "Determine if a key exists",
                  UNDEFINED_SINCE,
                  "EXISTS test",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Exists),
    CommandHolder(GEN_CMD_STRING(DB_SET_TTL_COMMAND),
                  "<key> <seconds>",
                  "Set a key's time to live in seconds",
                  UNDEFINED_SINCE,
                  DB_SET_TTL_COMMAND " key 10",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SetTTL),
    CommandHolder(GEN_CMD_STRING("EXPIREAT"),
                  "<key> <timestamp>",
                  "Set the expiration for a key as a UNIX timestamp",
                  UNDEFINED_SINCE,
                  "EXPIREAT 12345",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ExpireAt),
    CommandHolder(GEN_CMD_STRING("FLUSHALL"),
                  "-",
                  "Remove all keys from all databases",
                  UNDEFINED_SINCE,
                  "FLUSHALL",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::FlushALL),
    CommandHolder(GEN_CMD_STRING(DB_FLUSHDB_COMMAND),
                  "-",
                  "Remove all keys from the current database",
                  UNDEFINED_SINCE,
                  DB_FLUSHDB_COMMAND,
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::FlushDB),

    CommandHolder(GEN_CMD_STRING(DB_GET_KEY_COMMAND),
                  "<key>",
                  "Gecommon_exect the value of a key",
                  UNDEFINED_SINCE,
                  DB_GET_KEY_COMMAND " key",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Get),
    CommandHolder(GEN_CMD_STRING(DB_GETUNI_KEY_COMMAND),
                  "<key>",
                  "Get the value of a key.",
                  UNDEFINED_SINCE,
                  DB_GETUNI_KEY_COMMAND " key",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetUni),
    CommandHolder(GEN_CMD_STRING("GETBIT"),
                  "<key> <offset>",
                  "Returns the bit value at offset in the string value stored at key",
                  UNDEFINED_SINCE,
                  "GETBIT mykey 0",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetBit),
    CommandHolder(GEN_CMD_STRING("GETRANGE"),
                  "<key> <start> <end>",
                  "Get a substring of the string stored at a key",
                  UNDEFINED_SINCE,
                  "GETRANGE mykey 0 3",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetRange),
    CommandHolder(GEN_CMD_STRING("GETSET"),
                  "<key> <value>",
                  "Set the string value of a key and return its old value",
                  UNDEFINED_SINCE,
                  "GETSET mycounter 0",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetSet),
    CommandHolder(GEN_CMD_STRING("HDEL"),
                  "<key> <field> [field ...]",
                  "Delete one or more hash fields",
                  UNDEFINED_SINCE,
                  "HDEL myhash field1",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Hdel),
    CommandHolder(GEN_CMD_STRING("HEXISTS"),
                  "<key> <field>",
                  "Determine if a hash field exists",
                  UNDEFINED_SINCE,
                  "HEXISTS myhash field1",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hexists),
    CommandHolder(GEN_CMD_STRING("HGET"),
                  "<key> <field>",
                  "Get the value of a hash field",
                  UNDEFINED_SINCE,
                  "HGET myhash field1",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hget),
    CommandHolder(GEN_CMD_STRING("HGETALL"),
                  "<key>",
                  "Get all the fields and values in a hash",
                  UNDEFINED_SINCE,
                  "HGETALL myhash",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hgetall),
    CommandHolder(GEN_CMD_STRING("HINCRBY"),
                  "<key> <field> <increment>",
                  "Increment the integer value of a hash "
                  "field by the given number",
                  UNDEFINED_SINCE,
                  "HINCRBY myhash field 1",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::HincrByFloat),
    CommandHolder(GEN_CMD_STRING("HINCRBYFLOAT"),
                  "<key> <field> <increment>",
                  "Increment the float value of a hash "
                  "field by the given amount",
                  UNDEFINED_SINCE,
                  "HINCRBYFLOAT mykey field 0.1",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::HincrByFloat),
    CommandHolder(GEN_CMD_STRING("HKEYS"),
                  "<key>",
                  "Get all the fields in a hash",
                  UNDEFINED_SINCE,
                  "HKEYS myhash",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hkeys),
    CommandHolder(GEN_CMD_STRING("HLEN"),
                  "<key>",
                  "Get the number of fields in a hash",
                  UNDEFINED_SINCE,
                  "HLEN myhash",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hlen),
    CommandHolder(GEN_CMD_STRING("HMGET"),
                  "<key> <field> [field ...]",
                  "Get the values of all the given hash fields",
                  UNDEFINED_SINCE,
                  "HMGET myhash field1 field2 nofield",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Hmget),
    CommandHolder(GEN_CMD_STRING("HMSET"),
                  "<key> <field> <value> [field value ...]",
                  "Set multiple hash fields to multiple values",
                  UNDEFINED_SINCE,
                  "HMSET key 1 value",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Hmset,

                  {&TestArgsInRange, &TestArgsModule2Equal1}),
    CommandHolder(GEN_CMD_STRING("HSET"),
                  "<key> <field> <value>",
                  "Set the string value of a hash field",
                  UNDEFINED_SINCE,
                  "HSET myhash field1 data",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hset),
    CommandHolder(GEN_CMD_STRING("HSETNX"),
                  "<key> <field> <value>",
                  "Set the value of a hash field, only if the field does not exist",
                  UNDEFINED_SINCE,
                  "HSETNX myhash field1 data",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::HsetNX),
    CommandHolder(GEN_CMD_STRING("HVALS"),
                  "<key>",
                  "Get all the values in a hash",
                  UNDEFINED_SINCE,
                  "HVALS myhash",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Hvals),
    CommandHolder(GEN_CMD_STRING("INCR"),
                  "<key>",
                  "Increment the integer value of a key by one",
                  UNDEFINED_SINCE,
                  "INCR name",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Incr),
    CommandHolder(GEN_CMD_STRING("INCRBY"),
                  "<key> <increment>",
                  "Increment the integer value of a key by the given amount",
                  UNDEFINED_SINCE,
                  "INCRBY name 1",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::IncrBy),
    CommandHolder(GEN_CMD_STRING("INCRBYFLOAT"),
                  "<key> <increment>",
                  "Increment the float value of a key by the given amount",
                  UNDEFINED_SINCE,
                  "INCRBYFLOAT name 1",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::IncrByFloat),
    CommandHolder(GEN_CMD_STRING(DB_KEYS_COMMAND),
                  "<pattern>",
                  "Find all keys matching the given pattern",
                  UNDEFINED_SINCE,
                  DB_KEYS_COMMAND ALL_KEYS_PATTERNS,
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::RKeys),
    CommandHolder(GEN_CMD_STRING("LASTSAVE"),
                  "-",
                  "Get the UNIX time stamp of the last successful save to disk",
                  UNDEFINED_SINCE,
                  "LASTSAVE",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::LastSave),
    CommandHolder(GEN_CMD_STRING("LINDEX"),
                  "<key> <index>",
                  "Get an element from a list by its index",
                  UNDEFINED_SINCE,
                  "LINDEX mylist 0",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Lindex),
    CommandHolder(GEN_CMD_STRING("LINSERT"),
                  "<key> <BEFORE|AFTER> <pivot> <value>",
                  "Insert an element before or after another element in a list",
                  UNDEFINED_SINCE,
                  "LINSERT mylist BEFORE World There",
                  4,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Linsert),
    CommandHolder(GEN_CMD_STRING("LLEN"),
                  "<key>",
                  "Get the length of a list",
                  UNDEFINED_SINCE,
                  "LLEN mylist",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Llen),
    CommandHolder(GEN_CMD_STRING("LPOP"),
                  "<key>",
                  "Remove and get the first element in a list",
                  UNDEFINED_SINCE,
                  "LPOP mylist",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Lpop),
    CommandHolder(GEN_CMD_STRING("LPUSH"),
                  "<key> <value> [value ...]",
                  "Prepend one or multiple values to a list",
                  UNDEFINED_SINCE,
                  "LPUSH mylist hello",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Lpush),
    CommandHolder(GEN_CMD_STRING("LPUSHX"),
                  "<key> <value>",
                  "Prepend a value to a list, only if the "
                  "list exists",
                  UNDEFINED_SINCE,
                  "LPUSHX myotherlist Hello",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::LpushX),
    CommandHolder(GEN_CMD_STRING("LRANGE"),
                  "<key> <start> <stop>",
                  "Get a range of elements from a list",
                  UNDEFINED_SINCE,
                  "LRANGE mylist -3 2",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Lrange),
    CommandHolder(GEN_CMD_STRING("LREM"),
                  "<key> <count> <value>",
                  "Remove elements from a list",
                  UNDEFINED_SINCE,
                  "LREM mylist -2 hello",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Lrem),
    CommandHolder(GEN_CMD_STRING("LSET"),
                  "<key> <index> <value>",
                  "Set the value of an element in a list "
                  "by its index",
                  UNDEFINED_SINCE,
                  "LSET mylist -2 five",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Lset),
    CommandHolder(GEN_CMD_STRING("LTRIM"),
                  "<key> <start> <stop>",
                  "Trim a list to the specified range",
                  UNDEFINED_SINCE,
                  "LTRIM mylist 1 -1",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Ltrim),
    CommandHolder(GEN_CMD_STRING("MGET"),
                  "<key> [key ...]",
                  "Get the values of all the given keys",
                  UNDEFINED_SINCE,
                  "MGET key1 key2 nonexisting",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Mget),
    CommandHolder(GEN_CMD_STRING("MIGRATE"),
                  "<host> <port> <key> <destination-db> <timeout> [COPY] [REPLACE] [KEYS key]",
                  "Atomically transfer a key from a Redis instance to another one.",
                  UNDEFINED_SINCE,
                  "MIGRATE 192.168.1.34 6379 \"\" 0 5000 KEYS key1 key2 key3",
                  5,
                  2,
                  CommandInfo::Native,
                  &CommandsApi::Migrate),
    CommandHolder(GEN_CMD_STRING("MONITOR"),
                  "-",
                  "Listen for all requests received by the server in real time",
                  UNDEFINED_SINCE,
                  "MONITOR",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Monitor),
    CommandHolder(GEN_CMD_STRING("MOVE"),
                  "<key> <db>",
                  "Move a key to another database",
                  UNDEFINED_SINCE,
                  "MOVE name 7",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Move),
    CommandHolder(GEN_CMD_STRING("MSET"),
                  "<key> <value> [key value ...]",
                  "Set multiple keys to multiple values",
                  UNDEFINED_SINCE,
                  "MSET key1 Hello key2 World",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Mset),
    CommandHolder(GEN_CMD_STRING("MSETNX"),
                  "<key> <value> [key value ...]",
                  "Set multiple keys to multiple values, only if none of the keys exist",
                  UNDEFINED_SINCE,
                  "MSETNX key1 Hello key2 there",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::MsetNX),
    CommandHolder(GEN_CMD_STRING("MULTI"),
                  "-",
                  "Mark the start of a transaction block",
                  UNDEFINED_SINCE,
                  "MULTI",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Multi),
    CommandHolder(GEN_CMD_STRING("OBJECT"),
                  "<subcommand> [arguments [arguments ...]]",
                  "Inspect the internals of Redis objects",
                  UNDEFINED_SINCE,
                  "OBJECT refcount mylist",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Object),
    CommandHolder(GEN_CMD_STRING("PERSIST"),
                  "<key>",
                  "Remove the expiration from a key",
                  UNDEFINED_SINCE,
                  "PERSIST mykey",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Persist),
    CommandHolder(GEN_CMD_STRING(REDIS_CHANGE_PTTL_COMMAND),
                  "<key> <milliseconds>",
                  "Set a key's time to live in milliseconds",
                  UNDEFINED_SINCE,
                  REDIS_CHANGE_PTTL_COMMAND " mykey 1500",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Pexpire),
    CommandHolder(GEN_CMD_STRING("PEXPIREAT"),
                  "<key> <milliseconds-timestamp>",
                  "Set the expiration for a key as a UNIX timestamp specified in milliseconds",
                  UNDEFINED_SINCE,
                  "PEXPIREAT mykey 1555555555005",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::PexpireAt),
    CommandHolder(GEN_CMD_STRING("PFADD"),
                  "<key> <element> [element ...]",
                  "Adds the specified elements to the specified HyperLogLog.",
                  UNDEFINED_SINCE,
                  "PFADD hll a b c d e f g",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Pfadd),
    CommandHolder(GEN_CMD_STRING("PFCOUNT"),
                  "<key> [key ...]",
                  "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
                  UNDEFINED_SINCE,
                  "PFCOUNT hll",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Pfcount),
    CommandHolder(GEN_CMD_STRING("PFMERGE"),
                  "<destkey> <sourcekey> [sourcekey ...]",
                  "Merge N different HyperLogLogs into a single one.",
                  UNDEFINED_SINCE,
                  "PFMERGE hll3 hll1 hll2",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Pfmerge),
    CommandHolder(GEN_CMD_STRING("PING"),
                  "[message]",
                  "Ping the server",
                  UNDEFINED_SINCE,
                  "PING",
                  0,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Ping),
    CommandHolder(GEN_CMD_STRING("PSETEX"),
                  "<key> <milliseconds> <value>",
                  "Set the value and expiration in milliseconds of a key",
                  UNDEFINED_SINCE,
                  "PSETEX mykey 1000 hi",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::PsetEx),
    CommandHolder(GEN_CMD_STRING("PSUBSCRIBE"),
                  "<pattern> [pattern ...]",
                  "Listen for messages published to channels matching the given patterns",
                  UNDEFINED_SINCE,
                  "PSUBSCRIBE h*ll",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Subscribe),
    CommandHolder(GEN_CMD_STRING(REDIS_GET_PTTL_COMMAND),
                  "<key>",
                  "Get the time to live for a key in milliseconds",
                  UNDEFINED_SINCE,
                  "PTTL mykey",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Pttl),
    CommandHolder(GEN_CMD_STRING(DB_PUBLISH_COMMAND),
                  "<channel> <message>",
                  "Post a message to a channel",
                  UNDEFINED_SINCE,
                  "PUBLISH chan pan",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Publish),
    CommandHolder(GEN_CMD_STRING("PUNSUBSCRIBE"),
                  "[pattern [pattern ...]]",
                  "Stop listening for messages posted to channels matching the given patterns",
                  UNDEFINED_SINCE,
                  "PUNSUBSCRIBE *",
                  0,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::PunSubscribe),
    CommandHolder(GEN_CMD_STRING(DB_QUIT_COMMAND),
                  "-",
                  "Close the connection",
                  UNDEFINED_SINCE,
                  DB_QUIT_COMMAND,
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Quit),
    CommandHolder(GEN_CMD_STRING("RANDOMKEY"),
                  "-",
                  "Return a random key from the keyspace",
                  UNDEFINED_SINCE,
                  "RANDOMKEY",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::RandomKey),
    CommandHolder(GEN_CMD_STRING(DB_RENAME_KEY_COMMAND),
                  "<key> <newkey>",
                  "Rename a key",
                  UNDEFINED_SINCE,
                  DB_RENAME_KEY_COMMAND " old_name new_name",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Rename),
    CommandHolder(GEN_CMD_STRING("RENAMENX"),
                  "<key> <newkey>",
                  "Rename a key, only if the new key does not exist",
                  UNDEFINED_SINCE,
                  "RENAMENX mykey myotherkey",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::RenameNx),
    CommandHolder(GEN_CMD_STRING("RESTORE"),
                  "<key> <ttl> <serialized-value> [REPLACE]",
                  "Create a key using the provided serialized value, "
                  "previously obtained using DUMP.",
                  UNDEFINED_SINCE,
                  "RESTORE mykey 0 alex",
                  3,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Restore),
    CommandHolder(GEN_CMD_STRING("RPOP"),
                  "<key>",
                  "Remove and get the last element in a list",
                  UNDEFINED_SINCE,
                  "RPOP mykey",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Rpop),
    CommandHolder(GEN_CMD_STRING("RPOPLPUSH"),
                  "<source> <destination>",
                  "Remove the last element in a list, prepend it to another list and return it",
                  UNDEFINED_SINCE,
                  "RPOPLPUSH mylist myotherlist",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::RpopLpush),
    CommandHolder(GEN_CMD_STRING("RPUSH"),
                  "<key> <value> [value ...]",
                  "Append one or multiple values to a list",
                  UNDEFINED_SINCE,
                  "RPUSH mylist hello",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Rpush),
    CommandHolder(GEN_CMD_STRING("RPUSHX"),
                  "<key> <value>",
                  "Append a value to a list, only if the list exists",
                  UNDEFINED_SINCE,
                  "RPUSHX mylist World",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::RpushX),
    CommandHolder(GEN_CMD_STRING("SADD"),
                  "<key> <member> [member ...]",
                  "Add one or more members to a set",
                  UNDEFINED_SINCE,
                  "SADD myset World",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Sadd),
    CommandHolder(GEN_CMD_STRING("SAVE"),
                  "-",
                  "Synchronously save the dataset to disk",
                  UNDEFINED_SINCE,
                  "SAVE",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Save),
    CommandHolder(GEN_CMD_STRING(DB_SCAN_COMMAND),
                  "<cursor> [MATCH pattern] [COUNT count]",
                  "Incrementally iterate the keys space",
                  UNDEFINED_SINCE,
                  DB_SCAN_COMMAND " 0 MATCH * COUNT 10",
                  1,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::Scan),
    CommandHolder(GEN_CMD_STRING(DB_JSONDUMP_COMMAND),
                  "<cursor> PATH <absolute_path> [MATCH pattern] [COUNT count]",
                  "Dump DB into json file by path.",
                  UNDEFINED_SINCE,
                  DB_JSONDUMP_COMMAND " 0 PATH ~/dump.json MATCH * COUNT 10",
                  3,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::JsonDump),
    CommandHolder(GEN_CMD_STRING(DB_STORE_VALUE_COMMAND),
                  "<key> PATH <absolute_path>",
                  "Save value to file by path.",
                  UNDEFINED_SINCE,
                  DB_STORE_VALUE_COMMAND " key PATH ~/key_raw",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::StoreValue),
    CommandHolder(GEN_CMD_STRING("SCARD"),
                  "<key>",
                  "Get the number of members in a set",
                  UNDEFINED_SINCE,
                  "SCARD mykey",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Scard),

    CommandHolder(GEN_CMD_STRING("SCRIPT EXISTS"),
                  "<script> [script ...]",
                  "Check existence of scripts in the script cache.",
                  UNDEFINED_SINCE,
                  "SCRIPT EXISTS some",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::ScriptExists),
    CommandHolder(GEN_CMD_STRING("SCRIPT FLUSH"),
                  "-",
                  "Remove all the scripts from the script cache.",
                  UNDEFINED_SINCE,
                  "SCRIPT FLUSH",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ScriptFlush),
    CommandHolder(GEN_CMD_STRING("SCRIPT KILL"),
                  "-",
                  "Kill the script currently in execution.",
                  UNDEFINED_SINCE,
                  "SCRIPT KILL",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ScriptKill),
    CommandHolder(GEN_CMD_STRING("SCRIPT LOAD"),
                  "<script>",
                  "Load the specified Lua script into the script cache.",
                  UNDEFINED_SINCE,
                  "SCRIPT LOAD some",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ScriptLoad),

    CommandHolder(GEN_CMD_STRING("SDIFF"),
                  "<key> [key ...]",
                  "Subtract multiple sets",
                  UNDEFINED_SINCE,
                  "SDIFF mykey",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Sdiff),
    CommandHolder(GEN_CMD_STRING("SDIFFSTORE"),
                  "<destination> <key> [key ...]",
                  "Subtract multiple sets and store the resulting set in a key",
                  UNDEFINED_SINCE,
                  "SDIFFSTORE key key1 key2",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::SdiffStore),
    CommandHolder(GEN_CMD_STRING(DB_SELECTDB_COMMAND),
                  "<index>",
                  "Change the selected database for the current connection",
                  UNDEFINED_SINCE,
                  DB_SELECTDB_COMMAND " 0",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Select),
    CommandHolder(GEN_CMD_STRING(DB_SET_KEY_COMMAND),
                  "<key> <value> [EX seconds] [PX milliseconds] [NX|XX]",
                  "Set the string value of a key",
                  UNDEFINED_SINCE,
                  DB_SET_KEY_COMMAND " key value",
                  2,
                  5,
                  CommandInfo::Native,
                  &CommandsApi::Set),
    CommandHolder(GEN_CMD_STRING("SETBIT"),
                  "<key> <offset> <value>",
                  "Sets or clears the bit at offset in the string value stored at key",
                  UNDEFINED_SINCE,
                  "SETBIT mykey 7 1",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SetBit),
    CommandHolder(GEN_CMD_STRING("SETEX"),
                  "<key> <seconds> <value>",
                  "Set the value and expiration of a key",
                  UNDEFINED_SINCE,
                  "SETEX key 10 value",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SetEx),
    CommandHolder(GEN_CMD_STRING("SETNX"),
                  "<key> <value>",
                  "Set the value of a key, only if the key "
                  "does not exist",
                  UNDEFINED_SINCE,
                  "SETNX mykey some",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SetNX),
    CommandHolder(GEN_CMD_STRING("SETRANGE"),
                  "<key> <offset> <value>",
                  "Overwrite part of a string at key starting at the specified offset",
                  UNDEFINED_SINCE,
                  "SETRANGE key1 6 Redis",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SetRange),
    CommandHolder(GEN_CMD_STRING("SHUTDOWN"),
                  "[NOSAVE|SAVE]",
                  "Synchronously save the dataset to disk and then shut down the server",
                  UNDEFINED_SINCE,
                  "SHUTDOWN",
                  0,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Shutdown),
    CommandHolder(GEN_CMD_STRING("SINTER"),
                  "<key> [key ...]",
                  "Intersect multiple sets",
                  UNDEFINED_SINCE,
                  "SINTER key1 key2",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Sinter),
    CommandHolder(GEN_CMD_STRING("SINTERSTORE"),
                  "<destination> <key> [key ...]",
                  "Intersect multiple sets and store the resulting set in a key",
                  UNDEFINED_SINCE,
                  "SINTERSTORE key key1 key2",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::SinterStore),
    CommandHolder(GEN_CMD_STRING("SISMEMBER"),
                  "<key> <member>",
                  "Determine if a given value is a member of a set",
                  UNDEFINED_SINCE,
                  "SISMEMBER myset one",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SisMember),
    CommandHolder(GEN_CMD_STRING("SLAVEOF"),
                  "<host> <port>",
                  "Make the server a slave of another instance, or promote it as master",
                  UNDEFINED_SINCE,
                  "SLAVEOF localhost 1111",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::SlaveOf),
    CommandHolder(GEN_CMD_STRING("SLOWLOG"),
                  "<subcommand> [argument]",
                  "Manages the Redis slow queries log",
                  UNDEFINED_SINCE,
                  "SLOWLOG get 2",
                  1,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::SlowLog),
    CommandHolder(GEN_CMD_STRING("SMEMBERS"),
                  "<key>",
                  "Get all the members in a set",
                  UNDEFINED_SINCE,
                  "SMEMBERS myset",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Smembers),
    CommandHolder(GEN_CMD_STRING("SMOVE"),
                  "<source> <destination> <member>",
                  "Move a member from one set to another",
                  UNDEFINED_SINCE,
                  "SMOVE myset myotherset ale",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Smove),
    CommandHolder(GEN_CMD_STRING("SORT"),
                  "<key> [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE "
                  "destination]",
                  "Sort the elements in a list, set or sorted set",
                  UNDEFINED_SINCE,
                  "SORT mylist LIMIT 0 5 ALPHA DESC",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Sort),
    CommandHolder(GEN_CMD_STRING("SPOP"),
                  "<key> [count]",
                  "Remove and return one or multiple random members from a set",
                  UNDEFINED_SINCE,
                  "SPOP myset",
                  1,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Spop),
    CommandHolder(GEN_CMD_STRING("SRANDMEMBER"),
                  "<key> [count]",
                  "Get one or multiple random members from a set",
                  UNDEFINED_SINCE,
                  "SRANDMEMBER myset 2",
                  1,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::SRandMember),
    CommandHolder(GEN_CMD_STRING("SREM"),
                  "<key> <member> [member ...]",
                  "Remove one or more members from a set",
                  UNDEFINED_SINCE,
                  "SREM myset one",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Srem),
    CommandHolder(GEN_CMD_STRING("SSCAN"),
                  "<key> <cursor> [MATCH pattern] [COUNT count]",
                  "Incrementally iterate Set elements",
                  UNDEFINED_SINCE,
                  "SSCAN myset 0 MATCH * COUNT 100",
                  2,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::Sscan),
    CommandHolder(GEN_CMD_STRING("STRLEN"),
                  "<key>",
                  "Get the length of the value stored in a key",
                  UNDEFINED_SINCE,
                  "STRLEN mykey",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::StrLen),
    CommandHolder(GEN_CMD_STRING(DB_SUBSCRIBE_COMMAND),
                  "<channel> [channel ...]",
                  "Listen for messages published to the given channels",
                  UNDEFINED_SINCE,
                  DB_SUBSCRIBE_COMMAND " chan",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Subscribe),
    CommandHolder(GEN_CMD_STRING("SUNION"),
                  "<key> [key ...]",
                  "Add multiple sets",
                  UNDEFINED_SINCE,
                  "SUNION key1 key2",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Sunion),
    CommandHolder(GEN_CMD_STRING("SUNIONSTORE"),
                  "<destination> <key> [key ...]",
                  "Add multiple sets and store the resulting set in a key",
                  UNDEFINED_SINCE,
                  "SUNIONSTORE key key1 key2",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::SunionStore),
    CommandHolder(GEN_CMD_STRING("SYNC"),
                  "-",
                  "Internal command used for replication",
                  UNDEFINED_SINCE,
                  "SYNC",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Sync),
    CommandHolder(GEN_CMD_STRING("PSYNC"),
                  "-",
                  "Internal command used for replication",
                  UNDEFINED_SINCE,
                  "PSYNC",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Sync),
    CommandHolder(GEN_CMD_STRING("TIME"),
                  "-",
                  "Return the current server time",
                  UNDEFINED_SINCE,
                  "TIME",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Time),
    CommandHolder(GEN_CMD_STRING(DB_GET_TTL_COMMAND),
                  "<key>",
                  "Get the time to live for a key",
                  UNDEFINED_SINCE,
                  DB_GET_TTL_COMMAND " key",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetTTL),
    CommandHolder(GEN_CMD_STRING(DB_KEY_TYPE_COMMAND),
                  "<key>",
                  "Determine the type stored at key",
                  UNDEFINED_SINCE,
                  DB_KEY_TYPE_COMMAND " key",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::GetType),
    CommandHolder(GEN_CMD_STRING("UNSUBSCRIBE"),
                  "[channel [channel ...]]",
                  "Stop listening for messages posted to the given channels",
                  UNDEFINED_SINCE,
                  "UNSUBSCRIBE chan",
                  0,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Unsubscribe),
    CommandHolder(GEN_CMD_STRING("UNWATCH"),
                  "-",
                  "Forget about all watched keys",
                  UNDEFINED_SINCE,
                  "UNWATCH",
                  0,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Unwatch),
    CommandHolder(GEN_CMD_STRING("WATCH"),
                  "<key> [key ...]",
                  "Watch the given keys to determine execution of the MULTI/EXEC block",
                  UNDEFINED_SINCE,
                  "WATCH mykey",
                  1,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Watch),
    CommandHolder(GEN_CMD_STRING("ZADD"),
                  "<key> [NX|XX] [CH] [INCR] <score> "
                  "<member> [score member ...]",
                  "Add one or more members to a sorted set, or update its score if it already exists",
                  UNDEFINED_SINCE,
                  "ZADD myzset 2 two 3 three",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Zadd),
    CommandHolder(GEN_CMD_STRING("ZCARD"),
                  "<key>",
                  "Get the number of members in a sorted set",
                  UNDEFINED_SINCE,
                  "ZCARD some",
                  1,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Zcard),
    CommandHolder(GEN_CMD_STRING("ZCOUNT"),
                  "<key> <min> <max>",
                  "Count the members in a sorted set with scores within the given values",
                  UNDEFINED_SINCE,
                  "ZCOUNT myzset -inf +inf",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Zcount),
    CommandHolder(GEN_CMD_STRING("ZINCRBY"),
                  "<key> <increment> <member>",
                  "Increment the score of a member in a sorted set",
                  UNDEFINED_SINCE,
                  "ZINCRBY myzset 2 one",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZincrBy),
    CommandHolder(GEN_CMD_STRING("ZINTERSTORE"),
                  "<destination> <numkeys> <key> [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",
                  "Intersect multiple sorted sets and store the resulting sorted set in a new key",
                  UNDEFINED_SINCE,
                  "ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::ZincrStore),
    CommandHolder(GEN_CMD_STRING("ZLEXCOUNT"),
                  "<key> <min> <max>",
                  "Count the number of members in a sorted set between a given lexicographical range",
                  UNDEFINED_SINCE,
                  "ZLEXCOUNT myzset - +",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZlexCount),
    CommandHolder(GEN_CMD_STRING("ZRANGE"),
                  "<key> <start> <stop> [WITHSCORES]",
                  "Return a range of members in a sorted set, by index",
                  UNDEFINED_SINCE,
                  "ZRANGE myzset 0 -1",
                  3,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::Zrange),
    CommandHolder(GEN_CMD_STRING("ZRANGEBYLEX"),
                  "<key> <min> <max> [LIMIT offset count]",
                  "Return a range of members in a sorted set, by lexicographical range",
                  UNDEFINED_SINCE,
                  "ZRANGEBYLEX myzset - (c",
                  3,
                  3,
                  CommandInfo::Native,
                  &CommandsApi::ZrangeByLex),
    CommandHolder(GEN_CMD_STRING("ZRANGEBYSCORE"),
                  "<key> <min> <max> [WITHSCORES] [LIMIT offset count]",
                  "Return a range of members in a sorted set, by score",
                  UNDEFINED_SINCE,
                  "ZRANGEBYSCORE myzset 1 2",
                  3,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::ZrangeByScore),
    CommandHolder(GEN_CMD_STRING("ZRANK"),
                  "<key> <member>",
                  "Determine the index of a member in a sorted set",
                  UNDEFINED_SINCE,
                  "ZRANK myzset fif",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Zrank),
    CommandHolder(GEN_CMD_STRING("ZREM"),
                  "<key> <member> [member ...]",
                  "Remove one or more members from a sorted set",
                  UNDEFINED_SINCE,
                  "ZREM myzset some",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::Zrem),
    CommandHolder(GEN_CMD_STRING("ZREMRANGEBYLEX"),
                  "<key> <min> <max>",
                  "Remove all members in a sorted set between the given lexicographical range",
                  UNDEFINED_SINCE,
                  "ZREMRANGEBYLEX myzset [alpha [omega",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZremRangeByLex),
    CommandHolder(GEN_CMD_STRING("ZREMRANGEBYRANK"),
                  "<key> <start> <stop>",
                  "Remove all members in a sorted set within the given indexes",
                  UNDEFINED_SINCE,
                  "ZREMRANGEBYRANK myzset 0 1",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZremRangeByRank),
    CommandHolder(GEN_CMD_STRING("ZREMRANGEBYSCORE"),
                  "<key> <min> <max>",
                  "Remove all members in a sorted set within the given scores",
                  UNDEFINED_SINCE,
                  "ZREMRANGEBYSCORE myzset -inf (2",
                  3,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZremRangeByScore),
    CommandHolder(GEN_CMD_STRING("ZREVRANGE"),
                  "<key> <start> <stop> [WITHSCORES]",
                  "Return a range of members in a sorted set, by index, with scores ordered from high to low",
                  UNDEFINED_SINCE,
                  "ZREVRANGE myzset 2 3",
                  3,
                  1,
                  CommandInfo::Native,
                  &CommandsApi::ZrevRange),
    CommandHolder(
        GEN_CMD_STRING("ZREVRANGEBYLEX"),
        "<key> <max> <min> [LIMIT offset count]",
        "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
        UNDEFINED_SINCE,
        "ZREVRANGEBYLEX myzset (c -",
        3,
        3,
        CommandInfo::Native,
        &CommandsApi::ZrevRangeByLex),
    CommandHolder(GEN_CMD_STRING("ZREVRANGEBYSCORE"),
                  "<key> <max> <min> [WITHSCORES] [LIMIT offset count]",
                  "Return a range of members in a sorted set, by score, with scores ordered from high to low",
                  UNDEFINED_SINCE,
                  "ZREVRANGEBYSCORE myzset 2 1",
                  3,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::ZrevRangeByScore),
    CommandHolder(GEN_CMD_STRING("ZREVRANK"),
                  "<key> <member>",
                  "Determine the index of a member in a sorted set, with scores ordered from high to low",
                  UNDEFINED_SINCE,
                  "ZREVRANK myzset one",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::ZrevRank),
    CommandHolder(GEN_CMD_STRING("ZSCAN"),
                  "<key> <cursor> [MATCH pattern] [COUNT count]",
                  "Incrementally iterate sorted sets elements and associated scores",
                  UNDEFINED_SINCE,
                  "ZSCAN mylet 0",
                  2,
                  4,
                  CommandInfo::Native,
                  &CommandsApi::Zscan),
    CommandHolder(GEN_CMD_STRING("ZSCORE"),
                  "<key> <member>",
                  "Get the score associated with the given member in a sorted set",
                  UNDEFINED_SINCE,
                  "ZSCORE myzset one",
                  2,
                  0,
                  CommandInfo::Native,
                  &CommandsApi::Zscore),
    CommandHolder(GEN_CMD_STRING("ZUNIONSTORE"),
                  "<destination> <numkeys> <key> [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",
                  "Add multiple sorted sets and store the resulting sorted set in a new key",
                  UNDEFINED_SINCE,
                  "ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Native,
                  &CommandsApi::ZunionStore),
    CommandHolder(GEN_CMD_STRING("LFASTOSET"),
                  "<key> <value> [value ...]",
                  "Create list with one or multiple values",
                  UNDEFINED_SINCE,
                  "LFASTOSET test pest alex malec",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Extended,
                  &CommandsApi::LFastoSet),
    CommandHolder(GEN_CMD_STRING("SFASTOSET"),
                  "<key> <value> [value ...]",
                  "Create set with one or multiple values",
                  UNDEFINED_SINCE,
                  "SFASTOSET test pest alex malec",
                  2,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Extended,
                  &CommandsApi::SFastoSet),
    CommandHolder(GEN_CMD_STRING("ZFASTOSET"),
                  "<key> [NX|XX] [CH] [INCR] <score> <member> [score member ...]",
                  "Add one or more members to a sorted set, or update its score if it already exists",
                  UNDEFINED_SINCE,
                  "ZFASTOSET zset 2 two 3 three",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Extended,
                  &CommandsApi::ZFastoSet),
    CommandHolder(GEN_CMD_STRING("HFASTOSET"),
                  "<key> <field> <value> [field value ...]",
                  "Set multiple hash fields to multiple values",
                  UNDEFINED_SINCE,
                  "HFASTOSET hash kl value",
                  3,
                  INFINITE_COMMAND_ARGS,
                  CommandInfo::Extended,
                  &CommandsApi::HFastoSet)};

}  // namespace
}  // namespace dynomite
template <>
const char* ConnectionTraits<DYNOMITE>::GetBasedOn() {
  return "hiredis";
}

template <>
const char* ConnectionTraits<DYNOMITE>::GetVersionApi() {
  return redis_compatible::GetHiredisVersion();
}

template <>
const ConstantCommandsArray& ConnectionCommandsTraits<DYNOMITE>::GetCommands() {
  return dynomite::kCommands;
}
namespace internal {
template <>
common::Error Connection<dynomite::NativeConnection, dynomite::RConfig>::Connect(const dynomite::RConfig& config,
                                                                                 dynomite::NativeConnection** hout) {
  dynomite::NativeConnection* context = nullptr;
  common::Error err = dynomite::CreateConnection(config, &context);
  if (err) {
    return err;
  }

  *hout = context;
  // redisEnableKeepAlive(context);
  return common::Error();
}

template <>
common::Error Connection<dynomite::NativeConnection, dynomite::RConfig>::Disconnect(
    dynomite::NativeConnection** handle) {
  dynomite::NativeConnection* lhandle = *handle;
  if (lhandle) {
    redisFree(lhandle);
  }
  lhandle = nullptr;
  return common::Error();
}

template <>
bool Connection<dynomite::NativeConnection, dynomite::RConfig>::IsConnected(dynomite::NativeConnection* handle) {
  if (!handle) {
    return false;
  }

  return true;
}

}  // namespace internal

namespace dynomite {

common::Error CreateConnection(const RConfig& config, NativeConnection** context) {
  return redis_compatible::CreateConnection(config, config.ssh_info, context);
}

common::Error TestConnection(const RConfig& config) {
  return redis_compatible::TestConnection(config, config.ssh_info);
}

DBConnection::DBConnection(CDBConnectionClient* client)
    : base_class(client, new CommandTranslator(base_class::GetCommands())) {}

common::Error DBConnection::SelectImpl(const db_name_t& name, IDataBaseInfo** info) {
  if (name != GetCurrentDBName()) {
    return ICommandTranslator::InvalidInputArguments(GEN_CMD_STRING(DB_SELECTDB_COMMAND));
  }

  keys_limit_t kcount = 0;
  common::Error err = DBKeysCount(&kcount);
  DCHECK(!err) << err->GetDescription();
  *info = base_class::MakeDatabaseInfo(name, true, kcount);
  return common::Error();
}

IServerInfo* DBConnection::MakeServerInfo(const std::string& content) const {
  return new ServerInfo(content);
}

common::Error DBConnection::DBKeysCountImpl(keys_limit_t* size) {
  *size = 0;
  return common::Error();
}

}  // namespace dynomite
}  // namespace core
}  // namespace fastonosql
